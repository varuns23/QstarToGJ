#!/usr/bin/env python
import sys, os, subprocess, string, re
from ROOT import *
from array import array


gROOT.SetBatch(kTRUE);
gStyle.SetOptStat(0)
gStyle.SetOptTitle(0)
gStyle.SetTitleFont(42, "XYZ")
gStyle.SetTitleSize(0.045, "XYZ")
gStyle.SetLabelFont(42, "XYZ")
gStyle.SetLabelSize(0.045, "XYZ")
gStyle.SetCanvasBorderMode(0)
gStyle.SetFrameBorderMode(0)
gStyle.SetCanvasColor(kWhite)
gStyle.SetPadTickX(1)
gStyle.SetPadTickY(1)
t_m = 0.06  ##top margin
b_m = 0.11   ##botton margin
l_m = 0.115  ##left margin
r_m = 0.04  ##right margin
gStyle.SetPadTopMargin(t_m)
gStyle.SetPadBottomMargin(b_m)
gStyle.SetPadLeftMargin(l_m)
gStyle.SetPadRightMargin(r_m)
gROOT.ForceStyle()


BR = 1.0



masses = array('d', [700.0, 800.0, 900.0, 1000.0, 1100.0, 1200.0, 1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0])
xs_obs_limits  = array('d', [0.043261300000000003, 0.0288829, 0.0127066, 0.0071527300000000004, 0.0073611700000000002, 0.0099175300000000008, 0.0079669600000000004, 0.0060442100000000004, 0.0060724100000000003, 0.0041595299999999998, 0.00233022, 0.00159549, 0.00165913, 0.0015969999999999999, 0.0016696899999999999, 0.0016410299999999999, 0.00134162, 0.0010888499999999999, 0.00096837799999999999, 0.00071037599999999998, 0.00043614800000000003, 0.00034915800000000002, 0.000340088, 0.00035707799999999999, 0.00029766599999999998, 0.000251463, 0.00022563499999999999, 0.00020038900000000001, 0.000201984, 0.00020212299999999999, 0.000196539, 0.000191881, 0.00018848000000000001, 0.000197457, 0.00019481500000000001, 0.00019233299999999999, 0.000190063, 0.000188073])
xs_obs_limits_fb = array('d', [1000.0 * float(b) for b in xs_obs_limits ])

xs_exp_limits = array('d', [0.035456799999999997, 0.024380499999999999, 0.017505199999999999, 0.0133283, 0.0095709200000000001, 0.0076610200000000002, 0.0062512799999999997, 0.0049046899999999997, 0.00376692, 0.0032564999999999998, 0.0027552599999999998, 0.0022690200000000001, 0.00179166, 0.0015299700000000001, 0.0012809500000000001, 0.0010582300000000001, 0.00091599699999999999, 0.00085092800000000004, 0.00077223199999999997, 0.00065015099999999996, 0.00056257400000000004, 0.00048872499999999997, 0.00044408300000000001, 0.00041765999999999998, 0.00040558199999999998, 0.00036096499999999998, 0.00033267300000000002, 0.00031854700000000003, 0.00031468099999999998, 0.00029590399999999999, 0.00027901500000000002, 0.000264391, 0.000251143, 0.00026234000000000001, 0.00025577500000000002, 0.00024911600000000002, 0.00024016, 0.00023427800000000001])
xs_exp_limits_fb = array('d', [1000.0 * float(b) for b in xs_exp_limits ])

masses_exp = array('d', [700.0, 800.0, 900.0, 1000.0, 1100.0, 1200.0, 1300.0, 1400.0, 1500.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2100.0, 2200.0, 2300.0, 2400.0, 2500.0, 2600.0, 2700.0, 2800.0, 2900.0, 3000.0, 3100.0, 3200.0, 3300.0, 3400.0, 3500.0, 3600.0, 3700.0, 3800.0, 3900.0, 4000.0, 4100.0, 4200.0, 4300.0, 4400.0, 4400.0, 4300.0, 4200.0, 4100.0, 4000.0, 3900.0, 3800.0, 3700.0, 3600.0, 3500.0, 3400.0, 3300.0, 3200.0, 3100.0, 3000.0, 2900.0, 2800.0, 2700.0, 2600.0, 2500.0, 2400.0, 2300.0, 2200.0, 2100.0, 2000.0, 1900.0, 1800.0, 1700.0, 1600.0, 1500.0, 1400.0, 1300.0, 1200.0, 1100.0, 1000.0, 900.0, 800.0, 700.0])

xs_exp_limits_1sigma  = array('d', [0.023731700000000001, 0.0170703, 0.0129204, 0.0101826, 0.0069303899999999998, 0.0053394599999999999, 0.0040504900000000003, 0.0035441700000000001, 0.00267454, 0.00239916, 0.0019998799999999999, 0.00163528, 0.00139134, 0.0010822399999999999, 0.00088745000000000002, 0.00079694800000000001, 0.00068539700000000002, 0.00060026600000000002, 0.00051125900000000002, 0.00046553000000000002, 0.00042627099999999998, 0.000388878, 0.00035367200000000002, 0.000319816, 0.00030806099999999999, 0.00026832800000000002, 0.00025066200000000002, 0.000239371, 0.00023593400000000001, 0.00022542100000000001, 0.000212802, 0.00021074900000000001, 0.000201077, 0.000224336, 0.00021538699999999999, 0.00021091099999999999, 0.000207238, 0.000205362, 0.00028228800000000001, 0.00029176700000000001, 0.00030314600000000001, 0.00032448699999999999, 0.00034676200000000003, 0.00032883899999999999, 0.00036159700000000001, 0.00038773300000000002, 0.00042802600000000002, 0.00044344600000000001, 0.00045223000000000003, 0.000474105, 0.00050028900000000001, 0.00053848000000000004, 0.00059348699999999996, 0.00064777699999999999, 0.00071690999999999996, 0.00079286899999999997, 0.00089515799999999996, 0.00104039, 0.0011624700000000001, 0.00126694, 0.00151414, 0.00181631, 0.0021101200000000001, 0.0025153300000000001, 0.0031532800000000001, 0.0038069800000000002, 0.0044063699999999997, 0.0055911900000000002, 0.0070334799999999999, 0.0084836700000000004, 0.010704099999999999, 0.014936400000000001, 0.017494099999999999, 0.0246292, 0.032933700000000003, 0.049422199999999999])
xs_exp_limits_1sigma_fb = array('d', [1000.0 * float(b) for b in xs_exp_limits_1sigma ])

xs_exp_limits_2sigma = array('d', [0.016375600000000001, 0.012226900000000001, 0.0097508200000000003, 0.0074958899999999998, 0.00510371, 0.0039123099999999996, 0.0032265599999999998, 0.0025695599999999998, 0.0018817599999999999, 0.0016067900000000001, 0.0014405900000000001, 0.0011807499999999999, 0.00097551099999999998, 0.00088917100000000002, 0.00069930700000000003, 0.00062618699999999995, 0.00051909199999999997, 0.000462929, 0.00045401399999999998, 0.000385497, 0.00032846900000000002, 0.000294889, 0.000276218, 0.000256493, 0.00025067399999999999, 0.00023926000000000001, 0.00021855999999999999, 0.00020750200000000001, 0.00020844200000000001, 0.000198235, 0.00019420200000000001, 0.00018962800000000001, 0.00018410900000000001, 0.00020372399999999999, 0.000197388, 0.00019434399999999999, 0.00019121000000000001, 0.00018921000000000001, 0.00038368400000000002, 0.00040363699999999998, 0.000442516, 0.00047251599999999997, 0.00048144399999999998, 0.00045043299999999997, 0.00046281399999999998, 0.000528913, 0.00056158800000000002, 0.00061201500000000004, 0.00061670099999999999, 0.00062449100000000002, 0.00064168700000000005, 0.00073230400000000003, 0.00078713299999999997, 0.00087084399999999996, 0.00096422200000000004, 0.00114248, 0.00125212, 0.00138517, 0.00158241, 0.00186276, 0.0023061399999999999, 0.0024346599999999999, 0.00269345, 0.0034446899999999998, 0.0041143200000000003, 0.0050229000000000003, 0.0061420600000000004, 0.0072316500000000001, 0.0100077, 0.012219000000000001, 0.0143339, 0.020825300000000001, 0.023614699999999999, 0.032725600000000001, 0.044358099999999998, 0.069868299999999994])
xs_exp_limits_2sigma_fb = array('d', [1000.0 * float(b) for b in xs_exp_limits_2sigma ])


## Atimes eff 
AEff = array ('d', [0.464278, 0.489212, 0.510378, 0.528148, 0.542879, 0.554907, 0.564549, 0.572106, 0.577858, 0.582068, 0.58498, 0.586821, 0.587797, 0.588096, 0.587891, 0.587332, 0.586553, 0.585669, 0.584776, 0.583953, 0.583258, 0.582735, 0.582404, 0.58227, 0.58232, 0.58252, 0.582819, 0.583148, 0.583418, 0.583523, 0.583339, 0.582721, 0.581508, 0.579519, 0.576556, 0.572402, 0.56682, 0.559556])
## for 1Sigma and 2 Sigma
AEff_Sigma = array ('d', [0.464278, 0.489212, 0.510378, 0.528148, 0.542879, 0.554907, 0.564549, 0.572106, 0.577858, 0.582068, 0.58498, 0.586821, 0.587797, 0.588096, 0.587891, 0.587332, 0.586553, 0.585669, 0.584776, 0.583953, 0.583258, 0.582735, 0.582404, 0.58227, 0.58232, 0.58252, 0.582819, 0.583148, 0.583418, 0.583523, 0.583339, 0.582721, 0.581508, 0.579519, 0.576556, 0.572402, 0.56682, 0.559556, 0.559556, 0.56682, 0.572402, 0.576556, 0.579519, 0.581508, 0.582721, 0.583339, 0.583523, 0.583418, 0.583148, 0.582819, 0.58252, 0.58232, 0.58227, 0.582404, 0.582735, 0.583258, 0.583953, 0.584776, 0.585669, 0.586553, 0.587332, 0.587891, 0.588096, 0.587797, 0.586821, 0.58498, 0.582068, 0.577858, 0.572106, 0.564549, 0.554907, 0.542879, 0.528148, 0.510378, 0.489212, 0.464278])
##Ge new obser, expe, 1sigma and 2 sigma
xs_obs_limits_n = array('d', [float(b) / float(m) for b,m in zip(xs_obs_limits_fb, AEff )])
xs_exp_limits_n = array('d', [float(b) / float(m) for b,m in zip(xs_exp_limits_fb, AEff )])
xs_exp_limits_2sigma_n =array('d', [float(b) / float(m) for b,m in zip(xs_exp_limits_2sigma_fb, AEff_Sigma )])
xs_exp_limits_1sigma_n =array('d', [float(b) / float(m) for b,m in zip(xs_exp_limits_1sigma_fb, AEff_Sigma )])



masses_qstar = array('d', [    1.5,    1.7,     2.0,      2.5,      3.0,      3.3,     3.35,      3.4,     3.45,       3.5,     3.55,      3.6,       4.0,       4.5 ])
xs_qstar     = array('d', [ 0.4124, 0.1843, 0.05858, 0.009768, 0.001755, 6.366e-4, 5.428e-4, 4.662e-4, 3.947e-4,  3.385e-4, 2.821e-4, 2.388e-4, 6.241e-5, 1.270e-5 ])
xs_qstar_fb  = array('d', [  412.4,  184.3,   58.58,    9.768,    1.755, 6.366e-1, 5.428e-1, 4.662e-1, 3.947e-1,  3.385e-1, 2.821e-1, 2.388e-1, 6.241e-2, 1.270e-2 ])
eff_qstar_5a = array ('d', [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])

xs_5a = array('d', [float(b) * float(m) for b,m in zip(xs_qstar_fb, eff_qstar_5a)])

result = array('d',[0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0,2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9,3.0,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4.0,4.1,4.2,4.3,4.4])

result_2sigma= array('d',[0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0,2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9,3.0,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4.0,4.1,4.2,4.3,4.4,4.4,4.3,4.2,4.1,4.0,3.9,3.8,3.7,3.6,3.5,3.4,3.3,3.2,3.1,3.0,2.9,2.8,2.7,2.6,2.5,2.4,2.3,2.2,2.1,2.0,1.9,1.8,1.7,1.6,1.5,1.4,1.3,1.2,1.1,1.0,0.9,0.8,0.7])

graph_exp_2sigma = TGraph(len(masses_exp),result_2sigma,xs_exp_limits_2sigma_n)
graph_exp_2sigma.SetFillColor(kYellow)
graph_exp_2sigma.GetXaxis().SetTitle("q* Mass [TeV]")
graph_exp_2sigma.GetYaxis().SetTitle("#sigma #times B [fb]")
graph_exp_2sigma.GetYaxis().SetRangeUser(1e-01,300) 
graph_exp_2sigma.GetXaxis().SetNdivisions(510)
graph_exp_2sigma.GetXaxis().SetLimits(0.6,4.5)

graph_exp_2sigma.GetYaxis().CenterTitle()
graph_exp_2sigma.GetYaxis().SetLabelSize(0.04)
graph_exp_2sigma.GetYaxis().SetTitleOffset(1.1)
graph_exp_2sigma.GetXaxis().CenterTitle()
graph_exp_2sigma.GetXaxis().SetLabelSize(0.04)
graph_exp_2sigma.GetXaxis().SetTitleOffset(1.1)
graph_exp_2sigma.GetXaxis().CenterTitle()

graph_exp_1sigma = TGraph(len(masses_exp),result_2sigma,xs_exp_limits_1sigma_n)
graph_exp_1sigma.SetFillColor(kGreen+1)

graph_exp = TGraph(len(masses),result,xs_exp_limits_n)
#graph_exp.SetMarkerStyle(24)
graph_exp.SetLineWidth(2)
graph_exp.SetLineStyle(2)
graph_exp.SetLineColor(4)

graph_obs = TGraph(len(masses),result,xs_obs_limits_n)
graph_obs.SetMarkerStyle(20)
graph_obs.SetLineWidth(2)
#graph_obs.SetLineStyle(1)
graph_obs.SetLineColor(1)

graph_qstar = TGraph(len(masses_qstar),masses_qstar,xs_5a)
graph_qstar.SetLineWidth(2)                
graph_qstar.SetLineColor(2)

c = TCanvas("c", "",800,800)
c.cd()

graph_exp_2sigma.Draw("AF")
graph_exp_1sigma.Draw("F")
graph_exp.Draw("L")
graph_obs.Draw("LP")
graph_qstar.Draw("L")

##legend = TLegend(.55,.69,.85,.92)  ## for pas twiki
legend = TLegend(.58,.52,.89,.72)
legend.SetBorderSize(0)
legend.SetFillColor(0)
legend.SetFillStyle(0)
legend.SetTextFont(42)
legend.SetTextSize(0.035)
legend.SetHeader('95% CL upper limits')
legend.AddEntry(graph_obs,"Observed limit","lp")
legend.AddEntry(graph_exp,"Expected limit","lp")
legend.AddEntry(graph_exp_1sigma,"Expected limit #pm 1#sigma","f")
legend.AddEntry(graph_exp_2sigma,"Expected limit #pm 2#sigma","f")
#legend.AddEntry(graph_qstar,"Excited quark ( f = 1.0 )","l")
legend.Draw()

legend1 = TLegend(.16,.20,.47,.26)
legend1.SetBorderSize(0)
legend1.SetFillColor(0)
legend1.SetFillStyle(0)
legend1.SetTextFont(42)
legend1.SetTextSize(0.035)
legend1.AddEntry(graph_qstar,"Excited quark (f = 1.0)","l")
legend1.Draw()

lumiTextSize = 0.6
lumiTextOffset = 0.2
lumi = TLatex()
lumi.SetNDC()
lumi.SetTextAngle(0)
lumi.SetTextColor(kBlack)
lumi.SetTextFont(42)
lumi.SetTextAlign(31)
lumi.SetTextSize(lumiTextSize*t_m)
lumi.DrawLatex(1 - r_m, 1 - t_m +  lumiTextOffset*t_m, "19.7 fb^{-1} (8 TeV)")

cmsTextFont = 61
cmsTextSize = 0.75
extraTextFont = 52
extraOverCmsTextSize = 0.76
relExtraDY = 1.2
##posX_ = l_m     + 0.045 * (1 - l_m - r_m)  ##Top left
##posX_ = l_m     + 0.5   * (1 - l_m - r_m)   ## Centre
posX_ = 1 - r_m + 0.045 * (1 - l_m - r_m)  ## Top right
posY_ = 1 - t_m - 0.035 * (1 - t_m - b_m)

cms =  TLatex()
cms.SetNDC()
cms.SetTextFont(cmsTextFont)
cms.SetTextSize(cmsTextSize * t_m)
cms.SetTextAlign(33)  ### 11-top left;  21-top centre;  31-top right
##cms.DrawLatex(posX_, posY_, "CMS")
cms.DrawLatex(0.9, 0.9, "CMS")

### if extra text (Unpublished or Preliminary)
cms.SetTextFont(extraTextFont);
cms.SetTextAlign(33);
cms.SetTextSize(extraOverCmsTextSize*cmsTextSize*t_m);
##cms.DrawLatex(posX_, posY_- relExtraDY*cmsTextSize*t_m, extraText);
cms.DrawLatex(0.9, 0.9 - relExtraDY*cmsTextSize*t_m, "Unpublished");

l1 = TLatex()
l1.SetNDC()
l1.SetTextAlign(13)
l1.SetTextFont(62)
l1.SetTextSize(0.04)
l1.SetTextFont(42)
l1.DrawLatex(0.785,0.805, "q*#rightarrow q#gamma") ##0.21,0.26


gPad.RedrawAxis();

c.SetLogy()
c.SaveAs('ExcitedQuarksToGJ_f1p0_ObseExp_xsBR_Limits.pdf')
c.SaveAs('ExcitedQuarksToGJ_f1p0_ObseExp_xsBR_Limits.png')


